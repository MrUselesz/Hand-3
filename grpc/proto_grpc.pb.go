// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChitchatClient is the client API for Chitchat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChitchatClient interface {
	SendReceive(ctx context.Context, opts ...grpc.CallOption) (Chitchat_SendReceiveClient, error)
}

type chitchatClient struct {
	cc grpc.ClientConnInterface
}

func NewChitchatClient(cc grpc.ClientConnInterface) ChitchatClient {
	return &chitchatClient{cc}
}

func (c *chitchatClient) SendReceive(ctx context.Context, opts ...grpc.CallOption) (Chitchat_SendReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chitchat_serviceDesc.Streams[0], "/chitchat/SendReceive", opts...)
	if err != nil {
		return nil, err
	}
	x := &chitchatSendReceiveClient{stream}
	return x, nil
}

type Chitchat_SendReceiveClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type chitchatSendReceiveClient struct {
	grpc.ClientStream
}

func (x *chitchatSendReceiveClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chitchatSendReceiveClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChitchatServer is the server API for Chitchat service.
// All implementations must embed UnimplementedChitchatServer
// for forward compatibility
type ChitchatServer interface {
	SendReceive(Chitchat_SendReceiveServer) error
	mustEmbedUnimplementedChitchatServer()
}

// UnimplementedChitchatServer must be embedded to have forward compatible implementations.
type UnimplementedChitchatServer struct {
}

func (UnimplementedChitchatServer) SendReceive(Chitchat_SendReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method SendReceive not implemented")
}
func (UnimplementedChitchatServer) mustEmbedUnimplementedChitchatServer() {}

// UnsafeChitchatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChitchatServer will
// result in compilation errors.
type UnsafeChitchatServer interface {
	mustEmbedUnimplementedChitchatServer()
}

func RegisterChitchatServer(s *grpc.Server, srv ChitchatServer) {
	s.RegisterService(&_Chitchat_serviceDesc, srv)
}

func _Chitchat_SendReceive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChitchatServer).SendReceive(&chitchatSendReceiveServer{stream})
}

type Chitchat_SendReceiveServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type chitchatSendReceiveServer struct {
	grpc.ServerStream
}

func (x *chitchatSendReceiveServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chitchatSendReceiveServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chitchat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chitchat",
	HandlerType: (*ChitchatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendReceive",
			Handler:       _Chitchat_SendReceive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}
