// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ITUDatabaseClient is the client API for ITUDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ITUDatabaseClient interface {
	SendReceive(ctx context.Context, opts ...grpc.CallOption) (ITUDatabase_SendReceiveClient, error)
}

type iTUDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewITUDatabaseClient(cc grpc.ClientConnInterface) ITUDatabaseClient {
	return &iTUDatabaseClient{cc}
}

func (c *iTUDatabaseClient) SendReceive(ctx context.Context, opts ...grpc.CallOption) (ITUDatabase_SendReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ITUDatabase_serviceDesc.Streams[0], "/ITUDatabase/SendReceive", opts...)
	if err != nil {
		return nil, err
	}
	x := &iTUDatabaseSendReceiveClient{stream}
	return x, nil
}

type ITUDatabase_SendReceiveClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type iTUDatabaseSendReceiveClient struct {
	grpc.ClientStream
}

func (x *iTUDatabaseSendReceiveClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iTUDatabaseSendReceiveClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ITUDatabaseServer is the server API for ITUDatabase service.
// All implementations must embed UnimplementedITUDatabaseServer
// for forward compatibility
type ITUDatabaseServer interface {
	SendReceive(ITUDatabase_SendReceiveServer) error
	mustEmbedUnimplementedITUDatabaseServer()
}

// UnimplementedITUDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedITUDatabaseServer struct {
}

func (UnimplementedITUDatabaseServer) SendReceive(ITUDatabase_SendReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method SendReceive not implemented")
}
func (UnimplementedITUDatabaseServer) mustEmbedUnimplementedITUDatabaseServer() {}

// UnsafeITUDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ITUDatabaseServer will
// result in compilation errors.
type UnsafeITUDatabaseServer interface {
	mustEmbedUnimplementedITUDatabaseServer()
}

func RegisterITUDatabaseServer(s *grpc.Server, srv ITUDatabaseServer) {
	s.RegisterService(&_ITUDatabase_serviceDesc, srv)
}

func _ITUDatabase_SendReceive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ITUDatabaseServer).SendReceive(&iTUDatabaseSendReceiveServer{stream})
}

type ITUDatabase_SendReceiveServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type iTUDatabaseSendReceiveServer struct {
	grpc.ServerStream
}

func (x *iTUDatabaseSendReceiveServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iTUDatabaseSendReceiveServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ITUDatabase_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ITUDatabase",
	HandlerType: (*ITUDatabaseServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendReceive",
			Handler:       _ITUDatabase_SendReceive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}
